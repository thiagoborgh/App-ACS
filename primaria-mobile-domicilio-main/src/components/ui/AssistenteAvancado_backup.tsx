import { useState, useRef, useEffect } from 'react';
import { Dialog, DialogContent, DialogTitle, DialogDescription } from './dialog';
import { Button } from './button';
import { Badge } from './badge';
import { Separator } from './separator';
import { Switch } from './switch';
import { Label } from './label';
import { Textarea } from './textarea';
import { Input } from './input';
import { Card, CardContent, CardHeader, CardTitle } from './card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './select';
import { useNavigate } from 'react-router-dom';
import { 
  Brain, 
  Stethoscope, 
  User, 
  MapPin, 
  Calendar, 
  AlertTriangle, 
  Heart, 
  ShieldCheck,
  CheckCircle2,
  Clock,
  Lightbulb,
  Target,
  Send,
  Maximize2,
  Minimize2,
  X,
  BookOpen,
  Activity,
  Home,
  FileText,
  Users,
  Plus,
  Save,
  ArrowRight,
  MessageSquare,
  Sparkles,
  Weight,
  Thermometer,
  Baby,
  Shield,
  Package,
  Search,
  UserCheck,
  Play,
  ClipboardList
} from 'lucide-react';
import { mockPessoas } from '@/data/mockData';

type AssistenteAvancadoProps = {
  open?: boolean;
  onOpenChange?: (open: boolean) => void;
};

interface MensagemIA {
  id: string;
  tipo: 'user' | 'assistant';
  conteudo: string;
  timestamp: Date;
  categoria?: 'conversa' | 'visita' | 'formulario' | 'relatorio' | 'protocolo';
  dados?: any;
}

interface DadosVisita {
  // Dados b√°sicos da visita
  visitaFoiRealizada: boolean;
  motivosVisita: string[];
  
  // Busca Ativa (expand√≠vel)
  buscaAtivaExpandida: boolean;
  buscaAtiva: {
    consultaMedica: boolean;
    consultaOdontologica: boolean;
    vacinacao: boolean;
    examePreventivo: boolean;
    exameMama: boolean;
    planejamentoFamiliar: boolean;
    preNatal: boolean;
    puericultura: boolean;
  };
  
  // Acompanhamento (expand√≠vel)  
  acompanhamentoExpandido: boolean;
  acompanhamento: {
    gestante: boolean;
    puerpera: boolean;
    recemNascido: boolean;
    crianca: boolean;
    pessoaComDeficiencia: boolean;
    hipertensao: boolean;
    diabetes: boolean;
    asma: boolean;
    dpoc: boolean;
    cancer: boolean;
    outrasCondicoes: boolean;
    problemaMental: boolean;
    dependenciaQuimica: boolean;
    reabilitacao: boolean;
    tuberculose: boolean;
    hanseniase: boolean;
  };
  
  // Antropometria (expand√≠vel)
  antropometriaExpandida: boolean;
  antropometria: {
    peso: string;
    altura: string;
  };
  
  // Sinais Vitais
  sinaisVitais: {
    pressaoArterial: string;
    frequenciaCardiaca: string;
    temperatura: string;
    saturacaoOxigenio: string;
  };
  
  // Profissional e observa√ß√µes
  visitaAcompanhada: boolean;
  profissionalAcompanhante: string;
  observacoes: string;
  
  // Controle de workflow
  pacienteSelecionado?: any;
  visitaSelecionada?: any;
  etapaAtual: 'selecao' | 'roteiro' | 'atendimento' | 'finalizacao';
}

interface FormularioVisita {
  paciente: string;
  endereco: string;
  tipoVisita: 'domiciliar' | 'pre-natal' | 'puericultura' | 'seguimento';
  data: string;
  hora: string;
  observacoes: string;
  condicoes: {
    diabetes: boolean;
    hipertensao: boolean;
    gestacao: boolean;
    idoso: boolean;
    crianca: boolean;
    deficiencia: boolean;
  };
  procedimentos: {
    aferirPA: boolean;
    verificarGlicemia: boolean;
    pesoAltura: boolean;
    vacinacao: boolean;
    orientacaoNutricional: boolean;
    avaliacaoFeridas: boolean;
  };
  medicamentos: {
    verificarAdesao: boolean;
    orientarHorarios: boolean;
    verificarEstoque: boolean;
    relatarEfeitosAdversos: boolean;
  };
}

// Base de conhecimento expandida para IA conversacional
const baseConhecimentoExpandida = {
  saudacoes: [
    "Ol√°! Como posso ajudar voc√™ hoje?",
    "Oi! Estou aqui para auxiliar no seu trabalho como ACS.",
    "Bem-vindo(a)! O que precisa saber ou fazer hoje?"
  ],
  
  respostasContext: {
    clima: "Como ACS, √© importante considerar o clima para as visitas. Em dias de chuva, priorize visitas internas e leve materiais protegidos.",
    
    transporte: "Para otimizar o deslocamento, sugiro agrupar visitas por proximidade geogr√°fica e considerar os hor√°rios de maior disponibilidade dos pacientes.",
    
    documentacao: "Sempre mantenha os registros atualizados. Isso ajuda no acompanhamento longitudinal e na continuidade do cuidado.",
    
    emergencias: "Em situa√ß√µes de emerg√™ncia, priorize a seguran√ßa do paciente, acione o SAMU (192) se necess√°rio e mantenha a calma.",
    
    familias: "O trabalho com fam√≠lias requer escuta ativa, respeito √†s diversidades culturais e abordagem integral da sa√∫de."
  },

  protocolosCompletos: {
    iniciarVisita: `
**üè† PROTOCOLO PARA INICIAR VISITA DOMICILIAR**

**1. PREPARA√á√ÉO:**
‚Ä¢ Revisar prontu√°rio do paciente/fam√≠lia
‚Ä¢ Verificar materiais necess√°rios
‚Ä¢ Confirmar endere√ßo e melhor hor√°rio
‚Ä¢ Planejar rota otimizada

**2. CHEGADA:**
‚Ä¢ Apresentar-se e identificar-se
‚Ä¢ Explicar objetivo da visita
‚Ä¢ Solicitar permiss√£o para entrar
‚Ä¢ Observar ambiente domiciliar

**3. AVALIA√á√ÉO:**
‚Ä¢ Verificar estado geral do paciente
‚Ä¢ Aferir sinais vitais se necess√°rio
‚Ä¢ Revisar medicamentos em uso
‚Ä¢ Identificar riscos ambientais

**4. ORIENTA√á√ïES:**
‚Ä¢ Fornecer educa√ß√£o em sa√∫de
‚Ä¢ Esclarecer d√∫vidas
‚Ä¢ Agendar pr√≥ximas a√ß√µes
‚Ä¢ Deixar material educativo

**5. REGISTRO:**
‚Ä¢ Documentar achados importantes
‚Ä¢ Atualizar cadastro se necess√°rio
‚Ä¢ Registrar orienta√ß√µes fornecidas
‚Ä¢ Planejar seguimento
    `
  }
};

export default function AssistenteAvancado(props: AssistenteAvancadoProps = {}) {
  const isControlled = typeof props.open === 'boolean' && typeof props.onOpenChange === 'function';
  const [open, setOpen] = useState(isControlled ? !!props.open : false);
  const [fullScreen, setFullScreen] = useState(false);
  const [mensagens, setMensagens] = useState<MensagemIA[]>([]);
  const [inputMensagem, setInputMensagem] = useState('');
  const [carregando, setCarregando] = useState(false);
  const [modoFormulario, setModoFormulario] = useState(false);
  const [formularioVisita, setFormularioVisita] = useState<FormularioVisita>({
    paciente: '',
    endereco: '',
    tipoVisita: 'domiciliar',
    data: new Date().toISOString().split('T')[0],
    hora: new Date().toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' }),
    observacoes: '',
    condicoes: {
      diabetes: false,
      hipertensao: false,
      gestacao: false,
      idoso: false,
      crianca: false,
      deficiencia: false,
    },
    procedimentos: {
      aferirPA: false,
      verificarGlicemia: false,
      pesoAltura: false,
      vacinacao: false,
      orientacaoNutricional: false,
      avaliacaoFeridas: false,
    },
    medicamentos: {
      verificarAdesao: false,
      orientarHorarios: false,
      verificarEstoque: false,
      relatarEfeitosAdversos: false,
    }
  });
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (isControlled) setOpen(!!props.open);
  }, [props.open, isControlled]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [mensagens]);

  // Inicializa√ß√£o do assistente avan√ßado
  useEffect(() => {
    if (open && mensagens.length === 0) {
      const mensagemInicial: MensagemIA = {
        id: 'inicial',
        tipo: 'assistant',
        conteudo: `ü§ñ **I.A30 - WORKFLOW COMPLETO DE VISITAS**

Ol√°! Agora sou seu assistente com **INTEGRA√á√ÉO TOTAL** ao sistema de visitas!

**üîÑ WORKFLOW INTEGRADO:**
üìã **Visitas** ‚Üí üéØ **Executar Roteiro** ‚Üí ‚ñ∂Ô∏è **Pr√≥xima Visita** ‚Üí üè• **Iniciar Atendimento** ‚Üí üß† **Prepara√ß√£o Inteligente** ‚Üí ‚úÖ **Completar Checklist** ‚Üí üíæ **Campos v5**

**‚ú® FUNCIONALIDADES AVAN√áADAS:**
‚Ä¢ üí¨ **Conversa√ß√£o livre** - Fa√ßa qualquer pergunta
‚Ä¢ üéØ **"Iniciar visita"** - Formul√°rio completo AtendimentoVisita  
‚Ä¢ üîÑ **Switches interativos** em todas as se√ß√µes
‚Ä¢ üìä **7 etapas estruturadas** conforme sistema oficial
‚Ä¢ ‚úÖ **Valida√ß√µes inteligentes** antes de finalizar
‚Ä¢ üè• **Integra√ß√£o com /visitas** e navega√ß√£o direta

**üìã SE√á√ïES DO FORMUL√ÅRIO (v5):**
1. **Dados B√°sicos** - Paciente, data, motivos da visita
2. **Busca Ativa** - Consultas, exames, procedimentos
3. **Acompanhamento** - Condi√ß√µes por patologia  
4. **Antropometria** - Peso, altura com valida√ß√µes
5. **Sinais Vitais** - PA, FC, temperatura, satura√ß√£o
6. **Profissional** - Visita acompanhada por equipe
7. **Observa√ß√µes** - Registro detalhado do atendimento

**üéØ COMANDOS ESPECIAIS:**
‚Ä¢ **"Iniciar visita"** - Abre workflow completo
‚Ä¢ **"Como est√° o tempo?"** - Orienta√ß√µes clim√°ticas
‚Ä¢ **"Melhor rota hoje"** - Otimiza√ß√£o de trajeto
‚Ä¢ **"Protocolo emerg√™ncia"** - Guias de urg√™ncia

**Digite "iniciar visita" para come√ßar o workflow completo!** üöÄ`,
        timestamp: new Date(),
        categoria: 'conversa'
      };
      setMensagens([mensagemInicial]);
    }
  }, [open, mensagens.length]);

  function handleOpenChange(isOpen: boolean) {
    if (isControlled) {
      props.onOpenChange?.(isOpen);
    } else {
      setOpen(isOpen);
    }
  }

  // IA Avan√ßada com processamento de linguagem natural
  function processarPerguntaIA(pergunta: string): MensagemIA {
    const q = pergunta.toLowerCase();
    let resposta = '';
    let categoria: MensagemIA['categoria'] = 'conversa';
    let dados: any = null;

    // Comando para iniciar atendimento (ap√≥s executar roteiro)
    if (q.includes('iniciar atendimento') || q.includes('come√ßar atendimento')) {
      setModoFormulario(true);
      categoria = 'visita';
      resposta = `ü©∫ **INICIANDO ATENDIMENTO - CARLOS MENDON√áA**

**üë§ PACIENTE SELECIONADO:**
‚Ä¢ **Nome:** Carlos Mendon√ßa (45 anos)
‚Ä¢ **üìç Endere√ßo:** Conjunto Vila Uni√£o, 123
‚Ä¢ **‚ö†Ô∏è Prioridade:** CR√çTICA
‚Ä¢ **üíä Condi√ß√£o:** Hipertens√£o grave + AVC recente

**üß† PREPARA√á√ÉO INTELIGENTE CONCLU√çDA:**
‚úÖ **Materiais necess√°rios:** Esfigmoman√¥metro, Term√¥metro, Lanterna
‚úÖ **Protocolos ativados:** Hipertens√£o + p√≥s-AVC
‚úÖ **Alertas configurados:** PA > 140/90, sinais neurol√≥gicos
‚úÖ **Medicamentos para conferir:** Losartana, AAS, Clopidogrel

**üìã FORMUL√ÅRIO COMPLETO ATIVADO:**
Use os switches interativos abaixo para registrar todos os dados da visita conforme o sistema oficial AtendimentoVisita.

**üéØ PRIORIDADES PARA ESTA VISITA:**
‚Ä¢ Aferir press√£o arterial IMEDIATAMENTE
‚Ä¢ Verificar sinais neurol√≥gicos (fala, movimento, coordena√ß√£o)
‚Ä¢ Conferir ades√£o aos medicamentos
‚Ä¢ Orientar sobre sinais de alerta de novo AVC
‚Ä¢ Avaliar necessidade de encaminhamento urgente

**O formul√°rio est√° pronto para preenchimento! ‚Üì**`;
    }

    // Comando para iniciar visita com comportamento de "Executar Roteiro"
    else if (q.includes('iniciar visita') || q.includes('nova visita') || q.includes('come√ßar visita')) {
      categoria = 'visita';
      resposta = `üéØ **EXECUTAR ROTEIRO - JONATHAN SILVA COSTA**

**üìã ROTEIRO ATIVO:**
‚Ä¢ **ACS:** Jonathan Silva Costa  
‚Ä¢ **Micro√°rea:** MA-003 - Esperan√ßa
‚Ä¢ **Data:** ${new Date().toLocaleDateString('pt-BR')}
‚Ä¢ **Status:** Em execu√ß√£o
‚Ä¢ **Visitas restantes:** 5 de 9 pendentes

**üö® PR√ìXIMA VISITA PRIORIT√ÅRIA:**

**üë§ Carlos Mendon√ßa (45 anos)**
‚Ä¢ **üìç Endere√ßo:** Conjunto Vila Uni√£o, 123
‚Ä¢ **‚ö†Ô∏è Prioridade:** CR√çTICA
‚Ä¢ **üíä Condi√ß√£o:** Hipertens√£o grave + AVC recente
‚Ä¢ **‚è±Ô∏è Tempo estimado:** 50 minutos
‚Ä¢ **üìû Contato:** (85) 99999-1234
‚Ä¢ **üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Respons√°vel:** Maria Mendon√ßa (esposa)

**ü©∫ PREPARA√á√ÉO INTELIGENTE:**
‚Ä¢ Aferir press√£o arterial (priorit√°rio)
‚Ä¢ Verificar sinais neurol√≥gicos p√≥s-AVC
‚Ä¢ Conferir ades√£o: Losartana, AAS, Clopidogrel
‚Ä¢ Orientar sobre sinais de alerta
‚Ä¢ Avaliar necessidade de encaminhamento

**‚ö° A√á√ïES DISPON√çVEIS:**
‚Ä¢ **"iniciar atendimento"** - Prepara√ß√£o IA + formul√°rio completo
‚Ä¢ **"pr√≥xima visita"** - Pular para Dona Rosa (85 anos)
‚Ä¢ **"ver roteiro completo"** - Todas as 9 visitas do dia

**Digite "iniciar atendimento" para come√ßar com Carlos Mendon√ßa!**`;
    }

    // Comando para iniciar atendimento - Executar a√ß√£o de PrepararAtendimento
    else if (q.includes('iniciar atendimento') || q.includes('come√ßar atendimento') || q.includes('preparar atendimento')) {
      categoria = 'visita';
      setFormMode('atendimento');
      resposta = `üè• **PREPARA√á√ÉO INTELIGENTE ATIVADA - CARLOS MENDON√áA**

**üë§ DADOS PR√â-CARREGADOS:**
‚Ä¢ **Nome:** Carlos Mendon√ßa (45 anos)
‚Ä¢ **CPF:** 123.456.789-01
‚Ä¢ **Endere√ßo:** Conjunto Vila Uni√£o, 123
‚Ä¢ **Telefone:** (85) 99999-1234
‚Ä¢ **Respons√°vel:** Maria Mendon√ßa (esposa)

**üö® CONDI√á√ïES CR√çTICAS IDENTIFICADAS:**
‚Ä¢ **Hipertens√£o arterial sist√™mica grave**
‚Ä¢ **AVC recente (h√° 3 meses)**
‚Ä¢ **Medica√ß√£o:** Losartana 50mg, AAS 100mg, Clopidogrel 75mg

**üéØ PREPARA√á√ÉO IA ESPEC√çFICA:**
‚Ä¢ Aferir PA obrigat√≥rio (>140/90 = cr√≠tico)
‚Ä¢ Avaliar mobilidade p√≥s-AVC
‚Ä¢ Verificar sinais neurol√≥gicos focais
‚Ä¢ Conferir ader√™ncia medicamentosa
‚Ä¢ Orientar sobre preven√ß√£o secund√°ria

**üìã FORMUL√ÅRIO DE ATENDIMENTO ATIVADO:**
O sistema preencheu automaticamente os dados de Carlos Mendon√ßa no formul√°rio abaixo. Revise as informa√ß√µes e complete os campos de atendimento.

**‚úÖ CHECKLIST PR√â-ATENDIMENTO:**
‚Ä¢ Material de PA dispon√≠vel ‚úì
‚Ä¢ Protocolo AVC carregado ‚úì
‚Ä¢ Contato emerg√™ncia confirmado ‚úì
‚Ä¢ Formul√°rio pr√©-preenchido ‚úì

**O formul√°rio est√° pronto para o atendimento domiciliar! ‚Üì**`;
    }

    // Comando para pr√≥xima visita
    else if (q.includes('pr√≥xima visita') || q.includes('proxima visita') || q.includes('pular visita')) {
      categoria = 'visita';
      resposta = `‚û°Ô∏è **PR√ìXIMA VISITA NO ROTEIRO**

**üë§ Dona Rosa Oliveira (85 anos)**
‚Ä¢ **üìç Endere√ßo:** Rua das Flores, 456
‚Ä¢ **‚ö†Ô∏è Prioridade:** ALTA
‚Ä¢ **üíä Condi√ß√£o:** Acamada, diabetes, HAS
‚Ä¢ **‚è±Ô∏è Tempo estimado:** 40 minutos
‚Ä¢ **üìû Contato:** (85) 99999-5678
‚Ä¢ **üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Respons√°vel:** Jo√£o Oliveira (filho)

**ü©∫ PREPARA√á√ÉO INTELIGENTE:**
‚Ä¢ Verificar glicemia (jejum/p√≥s-prandial)
‚Ä¢ Avaliar les√µes por press√£o
‚Ä¢ Conferir insulinoterapia
‚Ä¢ Orientar cuidador sobre posicionamento
‚Ä¢ Verificar sinais de infec√ß√£o

**‚ö° A√á√ïES DISPON√çVEIS:**
‚Ä¢ **"iniciar atendimento"** - Prepara√ß√£o IA + formul√°rio para Dona Rosa
‚Ä¢ **"voltar carlos"** - Retornar para Carlos Mendon√ßa
‚Ä¢ **"ver roteiro completo"** - Todas as 9 visitas do dia

**Digite "iniciar atendimento" para come√ßar com Dona Rosa!**`;
    }

    // Comando para ver roteiro completo
    else if (q.includes('ver roteiro completo') || q.includes('roteiro completo') || q.includes('todas visitas')) {
      categoria = 'visita';
      resposta = `üìã **ROTEIRO COMPLETO - JONATHAN SILVA COSTA**

**üìÖ Data:** ${new Date().toLocaleDateString('pt-BR')} | **Micro√°rea:** MA-003 - Esperan√ßa

**‚úÖ VISITAS REALIZADAS (4):**
1. ‚úì Maria Santos - 08:00 (Pr√©-natal)
2. ‚úì Jo√£o Pereira - 09:15 (Hipertens√£o)
3. ‚úì Ana Lima - 10:30 (Puericultura)
4. ‚úì Pedro Silva - 11:45 (Diabetes)

**‚è≥ VISITAS PENDENTES (5):**
5. üö® **Carlos Mendon√ßa** - 13:00 (CR√çTICA - AVC/HAS)
6. üî∂ **Dona Rosa** - 14:00 (ALTA - Acamada/DM)
7. üî∏ Ant√¥nio Costa - 15:00 (M√âDIA - Rotina)
8. üîπ L√∫cia Fernandes - 16:00 (BAIXA - Preventivo)
9. üîπ Francisco Rocha - 17:00 (BAIXA - Acompanhamento)

**üìä ESTAT√çSTICAS:**
‚Ä¢ **Tempo m√©dio:** 45 min/visita
‚Ä¢ **Prioridade cr√≠tica:** 1 paciente
‚Ä¢ **Estimativa conclus√£o:** 18:00

**‚ö° COMANDOS R√ÅPIDOS:**
‚Ä¢ **"carlos mendon√ßa"** - Ir para visita cr√≠tica
‚Ä¢ **"dona rosa"** - Ir para pr√≥xima prioridade
‚Ä¢ **"iniciar atendimento"** - Come√ßar com paciente atual

**Digite o nome do paciente ou "iniciar atendimento"!**`;
    }

    // Perguntas sobre clima/tempo`;
    }
      resposta = `üéØ **WORKFLOW DE VISITA DOMICILIAR INICIADO**

**üìã ETAPAS DO PROCESSO:**

**1. üéØ EXECUTAR ROTEIRO**
   ‚Ä¢ Revisar lista de visitas pendentes
   ‚Ä¢ Verificar prioridades (cr√≠tica, alta, m√©dia, baixa)
   ‚Ä¢ Confirmar endere√ßos e contatos

**2. ‚ñ∂Ô∏è PR√ìXIMA VISITA**  
   ‚Ä¢ Selecionar paciente da lista
   ‚Ä¢ Verificar hist√≥rico m√©dico
   ‚Ä¢ Revisar condi√ß√µes especiais

**3. ÔøΩ INICIAR ATENDIMENTO**
   ‚Ä¢ Prepara√ß√£o inteligente baseada no perfil
   ‚Ä¢ Materiais necess√°rios sugeridos
   ‚Ä¢ Protocolos espec√≠ficos ativados

**4. ‚úÖ COMPLETAR CHECKLIST**
   ‚Ä¢ Busca Ativa (expand√≠vel)
   ‚Ä¢ Acompanhamento por condi√ß√µes
   ‚Ä¢ Antropometria (peso/altura)
   ‚Ä¢ Sinais vitais completos
   ‚Ä¢ Observa√ß√µes detalhadas

**5. üíæ FINALIZAR**
   ‚Ä¢ Salvar dados da visita
   ‚Ä¢ Gerar relat√≥rio autom√°tico
   ‚Ä¢ Agendar pr√≥ximo retorno

O formul√°rio completo com todos os campos do sistema est√° dispon√≠vel abaixo! üëá`;
    }

    // Perguntas sobre clima/tempo
    else if (q.includes('tempo') || q.includes('clima') || q.includes('chuva') || q.includes('sol')) {
      resposta = `üå§Ô∏è **ORIENTA√á√ïES SOBRE CLIMA E VISITAS**

${baseConhecimentoExpandida.respostasContext.clima}

**‚òÄÔ∏è EM DIAS ENSOLARADOS:**
‚Ä¢ Prefira visitas matinais (7h-10h) ou tardinha (16h-18h)
‚Ä¢ Leve protetor solar e bon√©
‚Ä¢ Mantenha hidrata√ß√£o adequada
‚Ä¢ Cuidado com medicamentos que ficam no calor

**üåßÔ∏è EM DIAS CHUVOSOS:**
‚Ä¢ Priorize visitas em locais cobertos
‚Ä¢ Leve materiais em sacola imperme√°vel
‚Ä¢ Confirme disponibilidade antes de sair
‚Ä¢ Reagende se necess√°rio por seguran√ßa

**üå°Ô∏è TEMPERATURAS EXTREMAS:**
‚Ä¢ Cuidado especial com idosos e crian√ßas
‚Ä¢ Verificar conserva√ß√£o de medicamentos
‚Ä¢ Orientar sobre hidrata√ß√£o e vestu√°rio`;
    }

    // Perguntas sobre rota/deslocamento
    else if (q.includes('rota') || q.includes('trajeto') || q.includes('caminho') || q.includes('deslocamento')) {
      resposta = `üó∫Ô∏è **OTIMIZA√á√ÉO DE ROTAS E TRAJETOS**

${baseConhecimentoExpandida.respostasContext.transporte}

**üìç PLANEJAMENTO EFICIENTE:**
‚Ä¢ Agrupe visitas por bairro/regi√£o
‚Ä¢ Comece pelas mais distantes da UBS
‚Ä¢ Termine perto da unidade para retorno
‚Ä¢ Considere hor√°rios de maior disponibilidade

**‚è∞ MELHORES HOR√ÅRIOS:**
‚Ä¢ **7h-9h**: Pacientes idosos (acordam cedo)
‚Ä¢ **9h-11h**: Fam√≠lias com crian√ßas
‚Ä¢ **14h-17h**: Gestantes e adultos
‚Ä¢ **Evitar**: 12h-14h (almo√ßo) e ap√≥s 18h

**üö∂‚Äç‚ôÇÔ∏è DICAS DE SEGURAN√áA:**
‚Ä¢ Informe √† equipe sobre seu trajeto
‚Ä¢ Leve telefone carregado
‚Ä¢ Evite locais isolados ap√≥s escurecer
‚Ä¢ Use identifica√ß√£o vis√≠vel da UBS`;
    }

    // Perguntas sobre documenta√ß√£o
    else if (q.includes('registro') || q.includes('documentar') || q.includes('prontuario') || q.includes('relat√≥rio')) {
      resposta = `üìù **DOCUMENTA√á√ÉO E REGISTROS**

${baseConhecimentoExpandida.respostasContext.documentacao}

**üìã DADOS ESSENCIAIS:**
‚Ä¢ Data, hora e local da visita
‚Ä¢ Pessoas presentes no domic√≠lio
‚Ä¢ Observa√ß√µes do ambiente
‚Ä¢ Condi√ß√µes de sa√∫de identificadas
‚Ä¢ Orienta√ß√µes fornecidas
‚Ä¢ Encaminhamentos realizados

**üíª SISTEMAS DE REGISTRO:**
‚Ä¢ e-SUS Aten√ß√£o B√°sica
‚Ä¢ Prontu√°rio eletr√¥nico local
‚Ä¢ Fichas de acompanhamento
‚Ä¢ Relat√≥rios mensais

**üìä INDICADORES IMPORTANTES:**
‚Ä¢ Frequ√™ncia de visitas por fam√≠lia
‚Ä¢ Ades√£o a tratamentos
‚Ä¢ Mudan√ßas no quadro de sa√∫de
‚Ä¢ Satisfa√ß√£o com atendimento`;
    }

    // Perguntas sobre emerg√™ncias
    else if (q.includes('emergencia') || q.includes('urgente') || q.includes('samu') || q.includes('socorro')) {
      resposta = `üö® **PROTOCOLO DE EMERG√äNCIAS**

${baseConhecimentoExpandida.respostasContext.emergencias}

**üìû CONTATOS DE EMERG√äNCIA:**
‚Ä¢ **SAMU**: 192
‚Ä¢ **Bombeiros**: 193
‚Ä¢ **Pol√≠cia**: 190
‚Ä¢ **UBS**: [seu n√∫mero local]

**üè• SITUA√á√ïES DE EMERG√äNCIA:**
‚Ä¢ Parada cardiorrespirat√≥ria
‚Ä¢ Convuls√µes
‚Ä¢ Sangramento intenso
‚Ä¢ Dificuldade respirat√≥ria grave
‚Ä¢ Dor tor√°cica intensa
‚Ä¢ Perda de consci√™ncia

**üë®‚Äç‚öïÔ∏è PRIMEIROS SOCORROS:**
‚Ä¢ Mantenha a calma
‚Ä¢ Avalie responsividade
‚Ä¢ Verifique respira√ß√£o e pulso
‚Ä¢ Posicione adequadamente
‚Ä¢ N√£o mova v√≠tima com trauma
‚Ä¢ Aguarde socorro especializado`;
    }

    // Perguntas sobre abordagem familiar
    else if (q.includes('fam√≠lia') || q.includes('abordagem') || q.includes('resistente') || q.includes('recusa')) {
      resposta = `üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **ABORDAGEM FAMILIAR E COMUNICA√á√ÉO**

${baseConhecimentoExpandida.respostasContext.familias}

**ü§ù ESTRAT√âGIAS DE APROXIMA√á√ÉO:**
‚Ä¢ Apresente-se sempre com cordialidade
‚Ä¢ Explique o objetivo da visita
‚Ä¢ Respeite cren√ßas e valores familiares
‚Ä¢ Use linguagem acess√≠vel
‚Ä¢ Demonstre interesse genu√≠no

**üí¨ SUPERANDO RESIST√äNCIAS:**
‚Ä¢ Escute sem julgar
‚Ä¢ Valide preocupa√ß√µes leg√≠timas
‚Ä¢ Apresente benef√≠cios concretos
‚Ä¢ Ofere√ßa alternativas
‚Ä¢ Respeite o tempo da fam√≠lia

**üéØ T√âCNICAS DE COMUNICA√á√ÉO:**
‚Ä¢ Perguntas abertas
‚Ä¢ Escuta ativa
‚Ä¢ Linguagem corporal acolhedora
‚Ä¢ Evitar termos t√©cnicos
‚Ä¢ Confirmar entendimento`;
    }

    // Comandos especiais com IA
    else if (q.includes('relat√≥rio do dia') || q.includes('resumo do dia')) {
      categoria = 'relatorio';
      const hoje = new Date().toLocaleDateString('pt-BR');
      resposta = `üìä **RELAT√ìRIO INTELIGENTE DO DIA - ${hoje}**

**‚úÖ VISITAS PLANEJADAS:** 8
**‚úÖ VISITAS REALIZADAS:** 6
**‚è≥ PENDENTES:** 2

**üéØ DESTAQUES DO DIA:**
‚Ä¢ 3 pacientes com press√£o controlada
‚Ä¢ 1 gestante encaminhada para consulta
‚Ä¢ 2 fam√≠lias orientadas sobre dengue
‚Ä¢ 1 idoso com nova medica√ß√£o

**üìà INDICADORES:**
‚Ä¢ Taxa de cobertura: 95%
‚Ä¢ Ades√£o a tratamentos: 87%
‚Ä¢ Fam√≠lias satisfeitas: 100%

**üìã PR√ìXIMAS A√á√ïES:**
‚Ä¢ Reagendar 2 visitas pendentes
‚Ä¢ Acompanhar encaminhamento gestante
‚Ä¢ Retornar ao Sr. Jos√© (nova medica√ß√£o)`;
    }

    // Resposta padr√£o conversacional
    else {
      const saudacoes = baseConhecimentoExpandida.saudacoes;
      const saudacaoAleatoria = saudacoes[Math.floor(Math.random() * saudacoes.length)];
      
      resposta = `üí≠ **Conversa Livre com I.A30**

${saudacaoAleatoria}

Sobre sua pergunta: "${pergunta}"

Como assistente inteligente, posso ajudar com:

**ü§ñ CONVERSA√á√ÉO AVAN√áADA:**
‚Ä¢ Tire d√∫vidas sobre protocolos de sa√∫de
‚Ä¢ Pe√ßa orienta√ß√µes sobre situa√ß√µes espec√≠ficas
‚Ä¢ Solicite sugest√µes para otimizar seu trabalho
‚Ä¢ Converse sobre desafios do dia a dia

**üìã A√á√ïES PR√ÅTICAS:**
‚Ä¢ Digite "iniciar visita" para criar nova visita
‚Ä¢ Pergunte sobre clima, rotas, documenta√ß√£o
‚Ä¢ Solicite protocolos espec√≠ficos
‚Ä¢ Pe√ßa relat√≥rios autom√°ticos

**üéØ EXEMPLOS DE PERGUNTAS:**
‚Ä¢ "Como abordar fam√≠lia com resist√™ncia √† vacina√ß√£o?"
‚Ä¢ "Qual ordem ideal para visitas hoje?"
‚Ä¢ "Como registrar visita com m√∫ltiplas condi√ß√µes?"

Continue nossa conversa! Estou aqui para ajudar.`;
    }

    return {
      id: Date.now().toString(),
      tipo: 'assistant',
      conteudo: resposta,
      timestamp: new Date(),
      categoria,
      dados
    };
  }

  function enviarMensagem() {
    if (!inputMensagem.trim()) return;

    const mensagemUser: MensagemIA = {
      id: Date.now().toString(),
      tipo: 'user',
      conteudo: inputMensagem,
      timestamp: new Date()
    };

    setMensagens(prev => [...prev, mensagemUser]);
    setCarregando(true);

    setTimeout(() => {
      const respostaIA = processarPerguntaIA(inputMensagem);
      setMensagens(prev => [...prev, respostaIA]);
      setCarregando(false);
    }, 1000);

    setInputMensagem('');
  }

  function salvarVisita() {
    // Valida√ß√µes obrigat√≥rias
    if (!formularioVisita.paciente) {
      const mensagemErro: MensagemIA = {
        id: Date.now().toString(),
        tipo: 'assistant',
        conteudo: '‚ö†Ô∏è **ERRO**: Por favor, selecione um paciente antes de finalizar o atendimento.',
        timestamp: new Date(),
        categoria: 'formulario'
      };
      setMensagens(prev => [...prev, mensagemErro]);
      return;
    }

    // Verificar se pelo menos um motivo foi selecionado
    const motivosSelecionados = Object.values(formularioVisita.condicoes).some(value => value);
    if (!motivosSelecionados) {
      const mensagemErro: MensagemIA = {
        id: Date.now().toString(),
        tipo: 'assistant',
        conteudo: '‚ö†Ô∏è **ERRO**: Selecione pelo menos um motivo da visita antes de finalizar.',
        timestamp: new Date(),
        categoria: 'formulario'
      };
      setMensagens(prev => [...prev, mensagemErro]);
      return;
    }

    // Salvar dados da visita
    const visitas = JSON.parse(localStorage.getItem('visitas') || '[]');
    const novaVisita = {
      id: Date.now().toString(),
      ...formularioVisita,
      timestamp: new Date().toISOString(),
      status: 'concluida',
      etapa: 'atendimento_finalizado',
      workflow: {
        roteiro: 'executado',
        proximaVisita: 'iniciada',
        atendimento: 'em_andamento',
        preparacaoInteligente: 'concluida',
        checklist: 'completo',
        finalizacao: 'concluida'
      }
    };
    
    visitas.push(novaVisita);
    localStorage.setItem('visitas', JSON.stringify(visitas));
    
    setModoFormulario(false);
    
    // Contar procedimentos realizados
    const procedimentosAtivos = Object.entries(formularioVisita.procedimentos)
      .filter(([_, ativo]) => ativo).length;
    const condicoesAcompanhadas = Object.entries(formularioVisita.condicoes)
      .filter(([_, ativo]) => ativo).length;
    
    const mensagemSucesso: MensagemIA = {
      id: Date.now().toString(),
      tipo: 'assistant',
      conteudo: `üéâ **ATENDIMENTO FINALIZADO COM SUCESSO!**

**ÔøΩ PACIENTE:** ${formularioVisita.paciente}
**üìÖ DATA:** ${new Date(formularioVisita.data).toLocaleDateString('pt-BR')}  
**‚è∞ HORA:** ${formularioVisita.hora}

**‚úÖ WORKFLOW COMPLETO:**
‚Ä¢ ‚úÖ Roteiro executado
‚Ä¢ ‚úÖ Pr√≥xima visita iniciada  
‚Ä¢ ‚úÖ Atendimento preparado
‚Ä¢ ‚úÖ Prepara√ß√£o inteligente
‚Ä¢ ‚úÖ Checklist completado
‚Ä¢ ‚úÖ Campos v5 preenchidos

**üìä RESUMO DO ATENDIMENTO:**
‚Ä¢ **${condicoesAcompanhadas}** condi√ß√µes identificadas
‚Ä¢ **${procedimentosAtivos}** procedimentos realizados
‚Ä¢ **Antropometria:** ${formularioVisita.procedimentos.pesoAltura ? 'Realizada' : 'N√£o aplic√°vel'}
‚Ä¢ **Sinais vitais:** Coletados
‚Ä¢ **Observa√ß√µes:** ${formularioVisita.observacoes ? 'Registradas' : 'N√£o informadas'}

**üéØ PR√ìXIMOS PASSOS:**
‚Ä¢ Visita salva no sistema local
‚Ä¢ Dados prontos para sincroniza√ß√£o
‚Ä¢ Dispon√≠vel em /visitas para consulta
‚Ä¢ Relat√≥rio gerado automaticamente

**üè• INTEGRA√á√ÉO:**
Esta visita seguiu exatamente o mesmo fluxo de:
üìã /visitas ‚Üí üéØ executar roteiro ‚Üí ‚ñ∂Ô∏è pr√≥xima visita ‚Üí üè• iniciar atendimento ‚Üí üß† prepara√ß√£o inteligente ‚Üí ‚úÖ completar checklist ‚Üí üíæ campos do /visita/atendimento/v5

Deseja iniciar uma nova visita ou consultar o sistema completo?`,
      timestamp: new Date(),
      categoria: 'visita'
    };
    
    setMensagens(prev => [...prev, mensagemSucesso]);
    
    // Reset completo do formul√°rio
    setFormularioVisita({
      paciente: '',
      endereco: '',
      tipoVisita: 'domiciliar',
      data: new Date().toISOString().split('T')[0],
      hora: new Date().toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' }),
      observacoes: '',
      condicoes: {
        diabetes: false,
        hipertensao: false,
        gestacao: false,
        idoso: false,
        crianca: false,
        deficiencia: false,
      },
      procedimentos: {
        aferirPA: false,
        verificarGlicemia: false,
        pesoAltura: false,
        vacinacao: false,
        orientacaoNutricional: false,
        avaliacaoFeridas: false,
      },
      medicamentos: {
        verificarAdesao: false,
        orientarHorarios: false,
        verificarEstoque: false,
        relatarEfeitosAdversos: false,
      }
    });
  }

  function getCategoriaIcon(categoria?: string) {
    switch (categoria) {
      case 'visita': return <Home className="w-4 h-4" />;
      case 'formulario': return <FileText className="w-4 h-4" />;
      case 'relatorio': return <Activity className="w-4 h-4" />;
      case 'protocolo': return <Stethoscope className="w-4 h-4" />;
      case 'conversa': return <MessageSquare className="w-4 h-4" />;
      default: return <Sparkles className="w-4 h-4" />;
    }
  }

  return (
    <Dialog open={open} onOpenChange={handleOpenChange}>
      <DialogContent
        className={
          fullScreen
            ? 'z-50 p-0 bg-white flex flex-col rounded-none shadow-none'
            : 'max-w-6xl w-full mx-auto p-0 rounded-lg shadow-2xl bg-white flex flex-col'
        }
        style={
          fullScreen
            ? {
                width: '100vw',
                height: '100vh',
                maxWidth: 'none',
                maxHeight: 'none',
                borderRadius: 0,
                margin: 0,
                boxShadow: 'none',
                zIndex: 50,
              }
            : {
                marginTop: '16px',
                marginBottom: '16px',
                marginLeft: 'auto',
                marginRight: 'auto',
                height: '95vh'
              }
        }
        aria-describedby="assistente-dialog-description"
      >
        <DialogTitle asChild>
          <span style={{position: 'absolute', width: 1, height: 1, padding: 0, margin: -1, overflow: 'hidden', clip: 'rect(0,0,0,0)', whiteSpace: 'nowrap', border: 0}}>
            I.A30 Assistente Avan√ßado
          </span>
        </DialogTitle>
        <DialogDescription asChild id="assistente-dialog-description">
          <span style={{position: 'absolute', width: 1, height: 1, padding: 0, margin: -1, overflow: 'hidden', clip: 'rect(0,0,0,0)', whiteSpace: 'nowrap', border: 0}}>
            Assistente inteligente avan√ßado com capacidades de conversa√ß√£o e automa√ß√£o para ACS.
          </span>
        </DialogDescription>

        {/* Cabe√ßalho */}
        <div className="flex items-center justify-between p-4 bg-gradient-to-r from-purple-600 via-blue-600 to-indigo-600 text-white">
          <div className="flex items-center gap-3">
            <div className="bg-white/20 p-2 rounded-lg">
              <Brain className="w-6 h-6" />
            </div>
            <div>
              <h2 className="text-lg font-bold">I.A30 Avan√ßado</h2>
              <p className="text-sm opacity-90">Assistente Inteligente com IA Conversacional</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Badge variant="secondary" className="bg-white/20 text-white border-white/30">
              IA Ativa
            </Badge>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setFullScreen(!fullScreen)}
              className="text-white hover:bg-white/20"
            >
              {fullScreen ? <Minimize2 className="w-4 h-4" /> : <Maximize2 className="w-4 h-4" />}
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => handleOpenChange(false)}
              className="text-white hover:bg-white/20"
            >
              <X className="w-4 h-4" />
            </Button>
          </div>
        </div>

        <div className="flex flex-1 overflow-hidden">
          {/* Chat principal */}
          <div className="flex-1 flex flex-col">
            {/* √Årea de mensagens */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {mensagens.map((mensagem) => (
                <div
                  key={mensagem.id}
                  className={`flex ${mensagem.tipo === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-[85%] rounded-lg p-3 ${
                      mensagem.tipo === 'user'
                        ? 'bg-purple-600 text-white'
                        : 'bg-gray-100 text-gray-800 border-l-4 border-purple-500'
                    }`}
                  >
                    {mensagem.tipo === 'assistant' && mensagem.categoria && (
                      <div className="flex items-center gap-2 mb-2">
                        {getCategoriaIcon(mensagem.categoria)}
                        <Badge variant="outline" className="text-xs">
                          {mensagem.categoria?.toUpperCase()}
                        </Badge>
                      </div>
                    )}
                    <div className="text-sm whitespace-pre-wrap">{mensagem.conteudo}</div>
                    <div className="text-xs opacity-70 mt-2">
                      {mensagem.timestamp.toLocaleTimeString()}
                    </div>
                  </div>
                </div>
              ))}
              
              {carregando && (
                <div className="flex justify-start">
                  <div className="bg-gray-100 rounded-lg p-3 max-w-[85%]">
                    <div className="flex items-center gap-2">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-purple-600"></div>
                      <span className="text-sm text-gray-600">I.A processando...</span>
                    </div>
                  </div>
                </div>
              )}
              <div ref={messagesEndRef} />
            </div>

            <Separator />

            {/* Sugest√µes r√°pidas */}
            <div className="px-4 py-2 bg-gray-50">
              <div className="flex flex-wrap gap-2">
                {[
                  "Iniciar visita",
                  "Como est√° o tempo?", 
                  "Melhor rota hoje",
                  "Protocolo emerg√™ncia",
                  "Relat√≥rio do dia",
                  "Abordagem familiar"
                ].map((sugestao) => (
                  <Button
                    key={sugestao}
                    variant="outline"
                    size="sm"
                    className="text-xs h-7"
                    onClick={() => setInputMensagem(sugestao)}
                  >
                    {sugestao}
                  </Button>
                ))}
              </div>
            </div>

            {/* Input de mensagem */}
            <div className="p-4 border-t bg-white">
              <div className="flex gap-2">
                <input
                  className="flex-1 border rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-purple-500"
                  value={inputMensagem}
                  onChange={(e) => setInputMensagem(e.target.value)}
                  onKeyDown={(e) => e.key === 'Enter' && enviarMensagem()}
                  placeholder="Fa√ßa qualquer pergunta ou digite um comando..."
                  disabled={carregando}
                />
                <Button 
                  onClick={enviarMensagem}
                  disabled={!inputMensagem.trim() || carregando}
                  className="bg-purple-600 hover:bg-purple-700"
                >
                  <Send className="w-4 h-4" />
                </Button>
              </div>
              <p className="text-xs text-gray-500 mt-2">
                üí° IA Avan√ßada: Converse livremente ou use comandos como "iniciar visita"
              </p>
            </div>
          </div>

          {/* Formul√°rio de visita completo (lateral) */}
          {modoFormulario && (
            <div className="w-96 border-l bg-gray-50 p-4 overflow-y-auto">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Play className="w-5 h-5 text-green-600" />
                    Workflow de Visita Completo
                  </CardTitle>
                  <Badge variant="outline" className="w-fit">
                    Campos v5 - AtendimentoVisita
                  </Badge>
                </CardHeader>
                <CardContent className="space-y-6">
                  
                  {/* 1. Dados B√°sicos */}
                  <Card className="border-blue-200">
                    <CardHeader className="pb-3">
                      <CardTitle className="text-sm flex items-center text-blue-800">
                        <User className="w-4 h-4 mr-2" />
                        1. Dados B√°sicos da Visita
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <div>
                        <Label htmlFor="paciente">Paciente</Label>
                        <Select
                          value={formularioVisita.paciente}
                          onValueChange={(value) => setFormularioVisita(prev => ({ ...prev, paciente: value }))}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Selecione o paciente" />
                          </SelectTrigger>
                          <SelectContent>
                            {mockPessoas.map((pessoa) => (
                              <SelectItem key={pessoa.id} value={pessoa.nome}>
                                {pessoa.nome} - {pessoa.idade} anos
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>

                      <div className="grid grid-cols-2 gap-2">
                        <div>
                          <Label htmlFor="data">Data</Label>
                          <Input
                            id="data"
                            type="date"
                            value={formularioVisita.data}
                            onChange={(e) => setFormularioVisita(prev => ({ ...prev, data: e.target.value }))}
                          />
                        </div>
                        <div>
                          <Label htmlFor="hora">Hora</Label>
                          <Input
                            id="hora"
                            type="time"
                            value={formularioVisita.hora}
                            onChange={(e) => setFormularioVisita(prev => ({ ...prev, hora: e.target.value }))}
                          />
                        </div>
                      </div>

                      <div>
                        <Label>Motivos da Visita (m√∫ltipla escolha)</Label>
                        <div className="grid grid-cols-1 gap-2 mt-2">
                          {[
                            'Consulta M√©dica', 'Consulta Odontol√≥gica', 'Vacina√ß√£o',
                            'Acompanhamento', 'Orienta√ß√£o em Sa√∫de', 'Busca Ativa',
                            'Controle de Medicamentos', 'Outros'
                          ].map((motivo) => (
                            <div key={motivo} className="flex items-center justify-between">
                              <Label className="text-sm">{motivo}</Label>
                              <Switch
                                checked={formularioVisita.condicoes[motivo as keyof typeof formularioVisita.condicoes] || false}
                                onCheckedChange={(checked) => 
                                  setFormularioVisita(prev => ({
                                    ...prev,
                                    condicoes: { ...prev.condicoes, [motivo]: checked }
                                  }))
                                }
                              />
                            </div>
                          ))}
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* 2. Busca Ativa */}
                  <Card className="border-orange-200">
                    <CardHeader className="pb-3">
                      <CardTitle className="text-sm flex items-center justify-between text-orange-800">
                        <div className="flex items-center">
                          <Search className="w-4 h-4 mr-2" />
                          2. Busca Ativa (Expand√≠vel)
                        </div>
                        <Switch
                          checked={formularioVisita.condicoes.gestacao}
                          onCheckedChange={(checked) => 
                            setFormularioVisita(prev => ({
                              ...prev,
                              condicoes: { ...prev.condicoes, gestacao: checked }
                            }))
                          }
                        />
                      </CardTitle>
                    </CardHeader>
                    {formularioVisita.condicoes.gestacao && (
                      <CardContent className="space-y-2">
                        {[
                          { key: 'consultaMedica', label: 'Consulta M√©dica' },
                          { key: 'consultaOdontologica', label: 'Consulta Odontol√≥gica' },
                          { key: 'vacinacao', label: 'Vacina√ß√£o' },
                          { key: 'examePreventivo', label: 'Exame Preventivo' },
                          { key: 'exameMama', label: 'Exame de Mama' },
                          { key: 'planejamentoFamiliar', label: 'Planejamento Familiar' },
                          { key: 'preNatal', label: 'Pr√©-Natal' },
                          { key: 'puericultura', label: 'Puericultura' }
                        ].map(({ key, label }) => (
                          <div key={key} className="flex items-center justify-between">
                            <Label className="text-sm">{label}</Label>
                            <Switch
                              checked={formularioVisita.procedimentos[key as keyof typeof formularioVisita.procedimentos] || false}
                              onCheckedChange={(checked) => 
                                setFormularioVisita(prev => ({
                                  ...prev,
                                  procedimentos: { ...prev.procedimentos, [key]: checked }
                                }))
                              }
                            />
                          </div>
                        ))}
                      </CardContent>
                    )}
                  </Card>

                  {/* 3. Acompanhamento por Condi√ß√µes */}
                  <Card className="border-green-200">
                    <CardHeader className="pb-3">
                      <CardTitle className="text-sm flex items-center justify-between text-green-800">
                        <div className="flex items-center">
                          <Heart className="w-4 h-4 mr-2" />
                          3. Acompanhamento (Expand√≠vel)
                        </div>
                        <Switch
                          checked={formularioVisita.condicoes.hipertensao}
                          onCheckedChange={(checked) => 
                            setFormularioVisita(prev => ({
                              ...prev,
                              condicoes: { ...prev.condicoes, hipertensao: checked }
                            }))
                          }
                        />
                      </CardTitle>
                    </CardHeader>
                    {formularioVisita.condicoes.hipertensao && (
                      <CardContent className="space-y-2">
                        {[
                          { key: 'gestante', label: 'Gestante' },
                          { key: 'puerpera', label: 'Pu√©rpera' },
                          { key: 'recemNascido', label: 'Rec√©m-Nascido' },
                          { key: 'crianca', label: 'Crian√ßa' },
                          { key: 'pessoaComDeficiencia', label: 'Pessoa com Defici√™ncia' },
                          { key: 'hipertensao', label: 'Hipertens√£o' },
                          { key: 'diabetes', label: 'Diabetes' },
                          { key: 'asma', label: 'Asma' },
                          { key: 'dpoc', label: 'DPOC' },
                          { key: 'cancer', label: 'C√¢ncer' },
                          { key: 'tuberculose', label: 'Tuberculose' },
                          { key: 'hanseniase', label: 'Hansen√≠ase' }
                        ].map(({ key, label }) => (
                          <div key={key} className="flex items-center justify-between">
                            <Label className="text-sm">{label}</Label>
                            <Switch
                              checked={formularioVisita.condicoes[key as keyof typeof formularioVisita.condicoes] || false}
                              onCheckedChange={(checked) => 
                                setFormularioVisita(prev => ({
                                  ...prev,
                                  condicoes: { ...prev.condicoes, [key]: checked }
                                }))
                              }
                            />
                          </div>
                        ))}
                      </CardContent>
                    )}
                  </Card>

                  {/* 4. Antropometria */}
                  <Card className="border-purple-200">
                    <CardHeader className="pb-3">
                      <CardTitle className="text-sm flex items-center justify-between text-purple-800">
                        <div className="flex items-center">
                          <Weight className="w-4 h-4 mr-2" />
                          4. Antropometria (Expand√≠vel)
                        </div>
                        <Switch
                          checked={formularioVisita.procedimentos.pesoAltura}
                          onCheckedChange={(checked) => 
                            setFormularioVisita(prev => ({
                              ...prev,
                              procedimentos: { ...prev.procedimentos, pesoAltura: checked }
                            }))
                          }
                        />
                      </CardTitle>
                    </CardHeader>
                    {formularioVisita.procedimentos.pesoAltura && (
                      <CardContent className="space-y-3">
                        <div className="grid grid-cols-2 gap-2">
                          <div>
                            <Label htmlFor="peso">Peso (kg)</Label>
                            <Input
                              id="peso"
                              type="number"
                              placeholder="70.5"
                              step="0.1"
                              min="0.5"
                              max="300"
                            />
                            <p className="text-xs text-gray-500 mt-1">Faixa: 0,5 a 300 kg</p>
                          </div>
                          <div>
                            <Label htmlFor="altura">Altura (cm)</Label>
                            <Input
                              id="altura"
                              type="number"
                              placeholder="170"
                              step="0.1"
                              min="30"
                              max="250"
                            />
                            <p className="text-xs text-gray-500 mt-1">Faixa: 30 a 250 cm</p>
                          </div>
                        </div>
                      </CardContent>
                    )}
                  </Card>

                  {/* 5. Sinais Vitais */}
                  <Card className="border-indigo-200">
                    <CardHeader className="pb-3">
                      <CardTitle className="text-sm flex items-center text-indigo-800">
                        <Stethoscope className="w-4 h-4 mr-2" />
                        5. Sinais Vitais
                        <Badge variant="outline" className="ml-2 text-xs bg-indigo-50">
                          IA Ativa
                        </Badge>
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <div className="grid grid-cols-2 gap-2">
                        <div>
                          <Label htmlFor="pressao">Press√£o Arterial</Label>
                          <Input
                            id="pressao"
                            placeholder="120/80"
                          />
                          <p className="text-xs text-gray-500 mt-1">Formato: sist√≥lica/diast√≥lica</p>
                        </div>
                        <div>
                          <Label htmlFor="freq">Freq. Card√≠aca</Label>
                          <Input
                            id="freq"
                            type="number"
                            placeholder="72"
                          />
                          <p className="text-xs text-gray-500 mt-1">bpm</p>
                        </div>
                      </div>
                      <div className="grid grid-cols-2 gap-2">
                        <div>
                          <Label htmlFor="temp">Temperatura</Label>
                          <Input
                            id="temp"
                            type="number"
                            placeholder="36.5"
                            step="0.1"
                          />
                          <p className="text-xs text-gray-500 mt-1">¬∞C</p>
                        </div>
                        <div>
                          <Label htmlFor="sat">Satura√ß√£o O2</Label>
                          <Input
                            id="sat"
                            type="number"
                            placeholder="98"
                          />
                          <p className="text-xs text-gray-500 mt-1">%</p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* 6. Profissional Acompanhante */}
                  <Card className="border-yellow-200">
                    <CardHeader className="pb-3">
                      <CardTitle className="text-sm flex items-center justify-between text-yellow-800">
                        <div className="flex items-center">
                          <UserCheck className="w-4 h-4 mr-2" />
                          6. Visita Acompanhada
                        </div>
                        <Switch
                          checked={formularioVisita.condicoes.deficiencia}
                          onCheckedChange={(checked) => 
                            setFormularioVisita(prev => ({
                              ...prev,
                              condicoes: { ...prev.condicoes, deficiencia: checked }
                            }))
                          }
                        />
                      </CardTitle>
                    </CardHeader>
                    {formularioVisita.condicoes.deficiencia && (
                      <CardContent>
                        <div>
                          <Label>Profissional Acompanhante</Label>
                          <Select>
                            <SelectTrigger>
                              <SelectValue placeholder="Selecione o profissional" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="dr-carlos">Dr. Carlos - M√©dico</SelectItem>
                              <SelectItem value="dra-ana">Dra. Ana - Enfermeira</SelectItem>
                              <SelectItem value="maria">Maria - T√©cnica de Enfermagem</SelectItem>
                              <SelectItem value="joao">Jo√£o - Dentista</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </CardContent>
                    )}
                  </Card>

                  {/* 7. Observa√ß√µes Finais */}
                  <Card className="border-gray-200">
                    <CardHeader className="pb-3">
                      <CardTitle className="text-sm flex items-center text-gray-800">
                        <ClipboardList className="w-4 h-4 mr-2" />
                        7. Observa√ß√µes da Visita
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <Textarea
                        value={formularioVisita.observacoes}
                        onChange={(e) => setFormularioVisita(prev => ({ ...prev, observacoes: e.target.value }))}
                        placeholder="Registre detalhes importantes da visita, condi√ß√µes encontradas, orienta√ß√µes dadas, encaminhamentos realizados..."
                        rows={4}
                      />
                    </CardContent>
                  </Card>

                  {/* A√ß√µes */}
                  <div className="space-y-3 pt-4">
                    <Button 
                      onClick={salvarVisita} 
                      className="w-full h-12 bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white"
                    >
                      <CheckCircle2 className="w-5 h-5 mr-2" />
                      Finalizar Atendimento
                    </Button>
                    
                    <Button 
                      variant="outline" 
                      onClick={() => navigate('/visitas')}
                      className="w-full"
                    >
                      <ArrowRight className="w-4 h-4 mr-2" />
                      Ir para Sistema de Visitas
                    </Button>
                    
                    <Button 
                      variant="outline" 
                      onClick={() => setModoFormulario(false)}
                      className="w-full"
                    >
                      <X className="w-4 h-4 mr-2" />
                      Fechar Formul√°rio
                    </Button>
                  </div>

                  {/* Tempo de Atendimento */}
                  <div className="text-center pt-4 border-t">
                    <div className="flex items-center justify-center text-gray-500 text-xs">
                      <Clock className="w-3 h-3 mr-1" />
                      Atendimento iniciado √†s {new Date().toLocaleTimeString()}
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}
